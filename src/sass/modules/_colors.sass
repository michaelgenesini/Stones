// ==========================================================================
// Colour palette
// ========================================================================== */

@import ../core/global

// MUST be these 2 palette (if you no need lighten or darken colors just delete all items from list)
$lightenColors: (lightgray:  #F5F7FA, mediumgray:  #CCD1D9, darkgray:  #656D78, grapefruit:  #ED5565, bittersweet:  #FC6E51, sunflower:  #FFCE54, grass:  #A0D468, mint:  #48CFAD, aqua: #4FC1E9, bluejeans:  #5D9CEC, lavander:  #AC92EC, pinkrose:  #EC87C0)
$darkenColors:  (lightgrayd: #E6E9ED, mediumgrayd: #AAB2BD, darkgrayd: #434A54, grapefruitd: #DA4453, bittersweetd: #E9573F, sunflowerd: #F6BB42, grassd: #8CC152, mintd: #37BC9B, aquad:#3BAFDA, bluejeansd: #4A89DC, lavanderd: #967ADC, pinkrosed: #D770AD)

// create complete color palette
$colors : map-merge($lightenColors, $darkenColors)
// additional base colors
$colors : map-merge($colors, $baseColors)

// Return the CSS color for a palette color name
@function getColor($name)
	@if (map-has-key($colors, $name))
		@return map-get($colors, $name)
	@else
		@warn "getColor: Color name '"+$name+ "'is not defined in the palette"
		@return undefined

// Return the CSS color for a palette color name
@function getColorString($name)
	@if (map-has-key($colors, $name))
		@return ""+$name""
	@else
		@warn "getColorString: Color name '"+$name+"' is not defined in the palette"
		@return undefined

+exports("colors")
	@each $color in $colors
		.bgcolor-#{getColorString(nth($color,1))}
			background-color: nth($color,2)
			color: getColor(lightgray)
			&:before
				text-transform: uppercase
				content: "#{nth($color,2)}"

	@each $color in $colors
		.color-#{getColorString(nth($color,1))},
		.color-#{getColorString(nth($color,1))} div
			color: nth($color,2)